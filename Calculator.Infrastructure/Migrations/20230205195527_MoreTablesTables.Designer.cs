// <auto-generated />
using System;
using Calculator.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Calculator.Infrastructure.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    [Migration("20230205195527_MoreTablesTables")]
    partial class MoreTablesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("congestion.calculator.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("congestion.calculator.PublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicHolidays");
                });

            modelBuilder.Entity("congestion.calculator.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TaxRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("congestion.calculator.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleExceptionRuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleExceptionRuleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("congestion.calculator.MaximumChargeRule", b =>
                {
                    b.HasBaseType("congestion.calculator.TaxRule");

                    b.HasDiscriminator().HasValue("MaximumChargeRule");
                });

            modelBuilder.Entity("congestion.calculator.TimeExemptionRule", b =>
                {
                    b.HasBaseType("congestion.calculator.TaxRule");

                    b.HasDiscriminator().HasValue("TimeExemptionRule");
                });

            modelBuilder.Entity("congestion.calculator.VehicleExceptionRule", b =>
                {
                    b.HasBaseType("congestion.calculator.TaxRule");

                    b.HasDiscriminator().HasValue("VehicleExceptionRule");
                });

            modelBuilder.Entity("congestion.calculator.TaxRule", b =>
                {
                    b.HasOne("congestion.calculator.City", null)
                        .WithMany("TaxRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion.calculator.Vehicle", b =>
                {
                    b.HasOne("congestion.calculator.VehicleExceptionRule", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleExceptionRuleId");
                });

            modelBuilder.Entity("congestion.calculator.City", b =>
                {
                    b.Navigation("TaxRules");
                });

            modelBuilder.Entity("congestion.calculator.VehicleExceptionRule", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
